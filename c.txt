from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task
import agentstack
from crewai_tools import CodeInterpreterTool

# -------------------------------------------------------
# Code Interpreter in unsafe mode (no Docker dependency)
# -------------------------------------------------------
code_interpreter = CodeInterpreterTool(unsafe_mode=True)


def _clean_cfg(cfg: dict) -> dict:
    """Strip legacy tool fields & enforce code‑exec flags."""
    cfg = dict(cfg)
    cfg.pop("tools", None)
    cfg.pop("tool_names", None)
    cfg.setdefault("allow_code_execution", True)
    cfg.setdefault("code_execution_mode", "unsafe")
    return cfg


@CrewBase
class WebscraperCrew:
    """Crew definition with Firecrawl removed; uses Code‑Interpreter + Neon."""

    # -------------------- Agents -------------------- #
    @agent
    def web_scraper(self) -> Agent:
        return Agent(
            config=_clean_cfg(self.agents_config["web_scraper"]),
            tools=[code_interpreter, *agentstack.tools["neon"]],
            verbose=True,
        )

    @agent
    def data_extractor(self) -> Agent:
        return Agent(
            config=_clean_cfg(self.agents_config["data_extractor"]),
            tools=[code_interpreter, *agentstack.tools["neon"]],
            verbose=True,
        )

    @agent
    def content_storer(self) -> Agent:
        return Agent(
            config=_clean_cfg(self.agents_config["content_storer"]),
            tools=[*agentstack.tools["neon"]],
            verbose=True,
        )

    # -------------------- Tasks -------------------- #
    @task
    def scrape_site(self) -> Task:
        return Task(config=self.tasks_config["scrape_site"])

    @task
    def extract(self) -> Task:
        return Task(config=self.tasks_config["extract"])

    @task
    def store(self) -> Task:
        return Task(config=self.tasks_config["store"])

    # -------------------- Crew -------------------- #
    @crew
    def crew(self) -> Crew:
        return Crew(
            agents=self.agents,
            tasks=self.tasks,
            process=Process.sequential,
            verbose=True,
        )
