from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task
import agentstack

# -------------------------------------------------------
# 获取 Code-Interpreter 工具句柄（兼容不同注册名）
# -------------------------------------------------------
_ci_tools = []
for _name in ("code_interpreter", "code-interpreter", "codeInterpreter"):
    try:
        _ci_tools = agentstack.tools[_name]
        break
    except KeyError:
        continue

# -------------------------------------------------------
# 实用函数：剥离配置里潜在的 "tools" / "tool_names" 字段，
# 以免 YAML 里仍残留 firecrawl / code-interpreter 字符串导致报错。
# -------------------------------------------------------

def _clean_cfg(raw_cfg: dict) -> dict:
    cfg = dict(raw_cfg)  # 浅拷贝
    cfg.pop("tools", None)
    cfg.pop("tool_names", None)
    return cfg


@CrewBase
class WebscraperCrew:
    """web_scraper crew（Firecrawl 全面移除，使用 Code-Interpreter + Neon）"""

    # ---------------------- Agents ---------------------- #
    @agent
    def web_scraper(self) -> Agent:
        return Agent(
            config=_clean_cfg(self.agents_config["web_scraper"]),
            tools=[*_ci_tools, *agentstack.tools["neon"]],
            verbose=True,
        )

    @agent
    def data_extractor(self) -> Agent:
        return Agent(
            config=_clean_cfg(self.agents_config["data_extractor"]),
            tools=[*_ci_tools, *agentstack.tools["neon"]],
            verbose=True,
        )

    @agent
    def content_storer(self) -> Agent:
        return Agent(
            config=_clean_cfg(self.agents_config["content_storer"]),
            tools=[*agentstack.tools["neon"]],  # 存储只需数据库相关
            verbose=True,
        )

    # ---------------------- Tasks ---------------------- #
    @task
    def scrape_site(self) -> Task:
        return Task(config=self.tasks_config["scrape_site"])

    @task
    def extract(self) -> Task:
        return Task(config=self.tasks_config["extract"])

    @task
    def store(self) -> Task:
        return Task(config=self.tasks_config["store"])

    # ---------------------- Crew ---------------------- #
    @crew
    def crew(self) -> Crew:
        return Crew(
            agents=self.agents,
            tasks=self.tasks,
            process=Process.sequential,
            verbose=True,
        )
